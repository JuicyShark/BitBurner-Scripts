let Manager = {
  networks: [],
  optimalNetworks: [],
  ramAvailable: [],
  serverList: ["home", "Juicy", "basicManager"]
};

/** @param {import(".").NS } ns */
export async function main(ns) {
  while (true) {
    init(ns)
    for (let i in Manager.serverList) {
      let serverInfo = ns.getServer(Manager.serverList[i])
      let threadCount = Math.floor(((serverInfo.maxRam) - (ns.getScriptRam("basicHackManager.ns", serverInfo.hostname))) / (Manager.optimalNetworks.length * 2));
      for (let i in Manager.optimalNetworks) {
        let network = Manager.optimalNetworks[i]
        if (network.hasAdminRights) {
          let type = checkThresholds(network)
          if (!ns.isRunning(`${type.toLowerCase()}.ns`, serverInfo.hostname, network.hostname, type)) {
            await new Promise(resolve => setTimeout(resolve, 500))
              .then(ns.exec(`${type.toLowerCase()}.ns`, serverInfo.hostname, Math.floor(threadCount * 1.75) , network.hostname, type))
          } else {
            await new Promise(resolve => setTimeout(resolve, 250))
          }
        } else {
          gainAdminRights(ns, network)
        }
      }
    }
  }
}

/** @param {NS} ns **/
function init(ns) {
  setupNetworkMem(ns, ns.scan("home"))
}

/** @param {NS} ns **/
function setupNetworkMem(ns, networks) {
  for (let i in networks) {
    Manager.networks[i] = Object.assign({}, ns.getServer(networks[i]))
    Manager.networks[i].hackTime = Manager.networks[i].moneyMax / 60 / ns.getHackTime(Manager.networks[i].hostname)
    if (Manager.networks[i].running == null) {
      Manager.networks[i].running = false
    }
  }
  Manager.networks.sort((a, b) => {
    return b.hackTime - a.hackTime;
  });
  Manager.networks.forEach(e => ns.print(e.hackTime + e.hostname))
  //let goal = Manager.networks[0].hackTime / 1.5
  let goal = 1
  Manager.optimalNetworks = []
  for (let i in Manager.networks) {
    let network = Manager.networks[i]
    if (network.hackTime >= goal) {
      Manager.optimalNetworks.push(network)
    } else continue;
  }
}

function checkThresholds(network) {
  let res;
  if (network.hackDifficulty > network.minDifficulty * 5) {
    res = "Weaken"
  } else if (network.moneyAvailable < network.moneyMax * 0.50) {
    res = "Grow"
  } else {
    res = "Hack"
  }
  return res
}

function gainAdminRights(ns, network) {
  if (network.openPortCount >= network.numOpenPortsRequired) {
    ns.run("NUKE.exe", "home")
  } else {
    ns.run("BruteSSH.exe", "home")
    ns.run("FTPCrack.exe", "home")
  }
}